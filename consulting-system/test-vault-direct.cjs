#!/usr/bin/env node

/**
 * Direct test of VaultManager to create actual notes in Obsidian
 */

const fs = require('fs').promises;
const path = require('path');

// Simple inline template engine
class NoteTemplateEngine {
  async generateFromTemplate(templateType, data) {
    const timestamp = new Date().toISOString();
    
    switch (templateType) {
      case 'project-overview':
        return this.generateProjectOverview(data, timestamp);
      default:
        return `# ${templateType}\n\nGenerated: ${timestamp}\n\n${JSON.stringify(data, null, 2)}`;
    }
  }

  generateProjectOverview(data, timestamp) {
    return `# ${data.projectName} - Project Overview

---
project_id: ${data.projectId}
client_name: ${data.clientName}
project_name: ${data.projectName}
project_type: ${data.projectType || 'Unknown'}
start_date: ${data.startDate || timestamp}
current_status: ${data.currentStatus || 'Planning'}
maturity_level: ${data.maturityLevel || 'POC'}
last_updated: ${timestamp}
---

## Project Summary

**Client:** [[${data.clientName}]]
**Project Type:** ${data.projectType || 'Unknown'}
**Current Maturity Level:** ${data.maturityLevel || 'POC'}
**Status:** ${data.currentStatus || 'Planning'}

### Overview
${data.description || 'Project description to be added.'}

### Objectives
${(data.objectives || []).map(obj => `- ${obj}`).join('\n') || '- To be defined'}

## Architecture Overview

${data.architecture || 'Architecture to be defined.'}

## Business Context

### Stakeholders
${(data.stakeholders || []).map(s => `- **${s.role || 'Role'}:** ${s.name || 'Name'} (${s.contact || 'Contact'})`).join('\n') || '- To be defined'}

## Next Steps

${(data.nextSteps || []).map(step => `1. ${step}`).join('\n') || '1. Define project scope and requirements'}

---

*Last Updated: ${timestamp}*
*Generated by Consulting Delivery System*`;
  }
}

// VaultManager implementation
class VaultManager {
  constructor(vaultPath, templateEngine) {
    this.vaultPath = vaultPath;
    this.templateEngine = templateEngine;
    
    // Define vault structure
    this.vaultStructure = {
      projects: 'Projects',
      methodologies: 'Methodologies',
      patterns: 'Patterns',
      templates: 'Templates',
      dailyNotes: 'Daily Notes',
      decisions: 'Decisions'
    };
  }

  async ensureDirectoryExists(dirPath) {
    try {
      await fs.mkdir(dirPath, { recursive: true });
      console.log(`‚úì Directory ensured: ${dirPath}`);
    } catch (error) {
      console.error(`Error creating directory: ${error.message}`);
    }
  }

  async createProjectNote(projectData, templateType = 'project-overview') {
    const projectDir = path.join(this.vaultPath, this.vaultStructure.projects, projectData.clientName);
    await this.ensureDirectoryExists(projectDir);
    
    const noteContent = await this.templateEngine.generateFromTemplate(templateType, projectData);
    const notePath = path.join(projectDir, `${projectData.projectName}.md`);
    
    await fs.writeFile(notePath, noteContent);
    console.log(`‚úì Note created: ${notePath}`);
    
    return notePath;
  }

  async createDecisionGateNote(decisionGate) {
    const decisionDir = path.join(this.vaultPath, this.vaultStructure.decisions, decisionGate.projectId);
    await this.ensureDirectoryExists(decisionDir);
    
    const noteContent = await this.templateEngine.generateFromTemplate('decision-gate', decisionGate);
    const notePath = path.join(decisionDir, `Decision Gate - ${decisionGate.targetLevel} - ${decisionGate.id}.md`);
    
    await fs.writeFile(notePath, noteContent);
    console.log(`‚úì Decision gate note created: ${notePath}`);
    
    return notePath;
  }
}

// Test the actual functionality
async function testActualVaultCreation() {
  console.log('\nüéØ DOGFOODING: Testing Actual Obsidian Vault Creation\n');
  console.log('=' .repeat(60));

  const vaultPath = '/Users/speed/Documents/Obsidian Vault/consulting-system';
  const templateEngine = new NoteTemplateEngine();
  const vaultManager = new VaultManager(vaultPath, templateEngine);

  // Test data for the consulting system itself
  const consultingSystemProject = {
    projectId: 'CONSULT-001',
    clientName: 'Internal',
    projectName: 'Consulting Delivery System',
    projectType: 'System Development',
    description: 'A maturity-based consulting delivery system with integrated knowledge management and automated decision gates.',
    objectives: [
      'Track projects through 5 maturity levels (POC ‚Üí MVP ‚Üí PILOT ‚Üí PRODUCTION ‚Üí SCALE)',
      'Automate L1/L2/L3 hardening requirement validation',
      'Integrate knowledge management with Obsidian vault',
      'Implement pattern recognition for historical learning',
      'Support human decision gates with automated validation'
    ],
    stakeholders: [
      { role: 'System Architect', name: 'AI Agent', contact: 'MCP Protocol' },
      { role: 'Developer', name: 'Claude', contact: 'claude.ai' },
      { role: 'User', name: 'Consultant', contact: 'obsidian.md' }
    ],
    currentStatus: 'MVP',
    maturityLevel: 'MVP',
    startDate: '2024-12-07',
    architecture: `
### Technical Stack
- **Core Engine:** Node.js with ES6 modules
- **Integration:** MCP (Model Context Protocol) for AI agent communication
- **Knowledge Base:** Obsidian vault with markdown notes
- **Pattern Recognition:** Machine learning for historical analysis
- **Validation:** Automated L1/L2/L3 hardening checks

### Key Components
1. **MaturityEngine:** Tracks project progression through levels
2. **ProjectContextManager:** Maintains rich contextual understanding
3. **VaultManager:** Handles Obsidian vault operations
4. **PatternRecognitionService:** Learns from historical patterns
5. **DecisionGateValidator:** Validates requirements for level transitions
    `,
    nextSteps: [
      'Complete VaultManager implementation',
      'Integrate MCP server with Claude',
      'Test pattern recognition capabilities',
      'Validate L1/L2/L3 requirements for MVP level',
      'Prepare for PILOT transition'
    ]
  };

  try {
    // Create the actual project note
    console.log('\nüìù Creating Project Note...');
    const projectNotePath = await vaultManager.createProjectNote(consultingSystemProject);
    
    // Create a decision gate for MVP ‚Üí PILOT transition
    console.log('\nüö™ Creating Decision Gate Note...');
    const decisionGate = {
      id: 'DG-001',
      projectId: 'CONSULT-001',
      targetLevel: 'PILOT',
      status: 'PENDING',
      created: new Date().toISOString(),
      validation: {
        overallStatus: 'IN_PROGRESS',
        requirements: {
          security: {
            status: 'PARTIAL',
            details: [
              'HTTPS enabled for all communications',
              'User authentication and session management',
              'Basic authorization controls',
              'Secure storage of sensitive data'
            ]
          },
          reliability: {
            status: 'PARTIAL',
            details: [
              'Automated unit testing (>70% coverage)',
              'Basic monitoring and logging',
              'Error handling and user feedback',
              'Backup and recovery procedures'
            ]
          },
          scalability: {
            status: 'PENDING',
            details: [
              'Load balancer configuration',
              'Auto-restart mechanisms',
              'Database connection pooling',
              'Resource usage monitoring'
            ]
          }
        }
      },
      paymentGate: {
        percentage: 50,
        milestone: 'MVP to PILOT transition',
        requirements: [
          'All L1/L2/L3 requirements validated',
          'User acceptance testing passed',
          'Security review completed',
          'Performance benchmarks met'
        ]
      }
    };
    
    const decisionNotePath = await vaultManager.createDecisionGateNote(decisionGate);
    
    // Verify the files were created
    console.log('\n‚úÖ Verification:');
    const projectExists = await fs.access(projectNotePath).then(() => true).catch(() => false);
    const decisionExists = await fs.access(decisionNotePath).then(() => true).catch(() => false);
    
    console.log(`  Project Note: ${projectExists ? '‚úì Created' : '‚úó Failed'}`);
    console.log(`  Decision Gate: ${decisionExists ? '‚úì Created' : '‚úó Failed'}`);
    
    if (projectExists && decisionExists) {
      console.log('\nüéâ SUCCESS: Actual notes created in Obsidian vault!');
      console.log('\nCreated files:');
      console.log(`  - ${projectNotePath}`);
      console.log(`  - ${decisionNotePath}`);
      
      // Show a preview of the created content
      console.log('\nüìÑ Project Note Preview:');
      const projectContent = await fs.readFile(projectNotePath, 'utf8');
      console.log(projectContent.split('\n').slice(0, 20).join('\n'));
      console.log('... (truncated)');
    } else {
      console.log('\n‚ùå FAILURE: Notes were not created successfully');
    }
    
  } catch (error) {
    console.error('\n‚ùå Error during test:', error);
  }
  
  console.log('\n' + '='.repeat(60));
  console.log('Dogfood test complete!');
}

// Run the test
testActualVaultCreation().catch(console.error);